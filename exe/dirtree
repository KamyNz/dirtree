#!/usr/bin/env ruby
require 'dirtree'
require 'optparse'

templates_dir = File.join(File.dirname(__FILE__), '..', 'templates')
templates = Dir.open(templates_dir).map do |file|
  file[0...file.index('.')]
end.reject(&:empty?)

options = {
  template: 'tree',
  server: false,
  local_dependencies: false
}

OptionParser.new do |opts|
  opts.banner = 'Usage: dirtree [options]... [file]...'

  opts.on(
    '-v',
    '--version',
    'Print version'
  ) do
    puts "Dirtree version #{Dirtree::VERSION}"
    exit
  end

  opts.on(
    '-h',
    '--help',
    'Show this help text'
  ) do
    puts opts
    exit
  end

  opts.on(
    '-l',
    '--local-dependencies',
    'Use saved JavaScript libraries instead of downloading them'
  ) do
    options[:local_dependencies] = true
  end

  opts.on(
    '-oFile.html',
    '--output=File.html',
    'Specify a path to write output, if
       not specified output will be printed to STDOUT'
  ) do |value|
    options[:output] = value
  end

  opts.on(
    '-tTemplateName',
    '--template=TemplateName',
    'Specify the template name, available templates ' + templates.to_s
  ) do |value|
    options[:template] = value
  end

  opts.on(
    '-s',
    '--server',
    'Run dirtree as a realtime server that updates with every line input'
  ) do
    options[:server] = true
  end
end.parse!

template_file = File.join(templates_dir, options[:template] + '.html.erb')

postprocessors = []
if options[:local_dependencies]
  postprocessors << Dirtree::PostProcessors::DependencyLocalizer.new
end

template = Dirtree::Template.new(template_file, postprocessors)

if options[:server]
  Dirtree::Server.start(template)
else
  files = ARGV.empty? ? STDIN.read.lines : ARGV
  files.each { |file| template.add_file(file) }

  if options.key?(:output)
    File.write(options[:output], template.output)
  else
    puts template.output
  end
end
